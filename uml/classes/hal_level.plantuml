@startuml hal_level

package HAL {
    class hal_sysclock
    class hal_spi
    class hal_gpio
    class hal_base_timer
    class hal_uart
}

class hal_sysclock {
    void halSysClockInit(void);

    uint32_t halSysClockGetTick(void);
}

class hal_spi {
    void halSPIInit(halSPI spi, halSPIInitStruct* initStruct);

    halSPIErrorCode halSPISend(halSPI spi, uint8_t* data, uint16_t dataSize, halSPICallBack sendAction);
    halSPIErrorCode halSPIReceive(halSPI spi, uint8_t* data, uint16_t dataSize, halSPICallBack receiveAction);

    void halSPISetCS(halSPI spi);
    void halSPIResetCS(halSPI spi);
}

class hal_gpio {
    void halGPIOInit(halGPIO_struct* const gpioStruct, const halGPIO_initStruct* const initStruct);
    
    halGPIO_pinState halGPIOReadPin(const halGPIO_struct* const gpioStruct);

    void halGPIOTogglePins(halGPIO_struct* const gpioStruct);
    void halGPIOResetPins(halGPIO_struct* const gpioStruct);
    void halGPIOSetPins(halGPIO_struct* const gpioStruct);
}

class hal_base_timer {
    void halBaseTimerInit (halBaseTimers timer, halInitBaseTimerStruct* halInitStruct, halTimerCallbackType callback);

    void halBaseTimerStart(halBaseTimers timer);
    void halBaseTimerStop(halBaseTimers timer);
}

class hal_uart {
    void halInitUART(halUART uart, halUARTInitStruct* initStruct);

    halUARTErrorCode halUARTTransfer(halUART uart, halUARTDataType dataType, uint8_t* buffer, uint16_t bufferSize, halUARTCallBack transferCallBack);
    halUARTErrorCode halUARTReceive(halUART uart, halUARTDataType dataType, uint8_t* buffer, uint16_t bufferSize, halUARTCallBack receiveCallBack);

    void halUARTSetOverloadCallBack(halUART uart, halUARTCallBack callback);
    void halUARTClearOverloadCallBack(halUART uart);
}

@enduml